#if __CERENKOV__ || __AUGCERLONG__
*-- Author :    K. BERNLOEHR MPIK HEIDELBERG    15/06/1998
C=======================================================================

      SUBROUTINE CERENK( STEPCR,UMEAN,VMEAN,WMEAN,EBEG,EEND,XBEG,YBEG,
     *          ZBEG,XEND,YEND,ZEND,TBEG,TEND,AMASS,CHARGE,WTTHIN,CTEA )

C-----------------------------------------------------------------------
C  C(H)ERENK(OV RADIATION FROM ALL KINDS OF CHARGED PARTICLES)
C
C  CREATION OF CHERENKOV PHOTONS ALONG THE TRACKS OF CHARGED PARTICLES.
C  CHERENKOV RADIATION IS ONLY CALCULATED FOR THE LOWEST OBSERVATION
C  LEVEL. ALL PARAMETERS OF THE PARTICLE TRACK STEP ARE PASSED AS
C  ARGUMENTS.
C  THIS SUBROUTINE IS CALLED FROM ELECTR AND UPDATE.
C  ARGUMENTS (ALL DOUBLE PRECISION):
C   STEPCR = STEP LENGTH FOR THE PARTICLE [CM]
C   UMEAN  = DIRECTION COSINE TO X AXIS (STEP AVERAGE)
C   VMEAN  = DIRECTION COSINE TO Y AXIS (STEP AVERAGE)
C   WMEAN  = DIRECTION COSINE TO -Z AXIS (STEP AVERAGE)
C   EBEG   = ENERGY [GEV] AT BEGINNING OF STEP
C   EEND   = ENERGY [GEV] AT END OF STEP
C   XBEG   = X POSITION [CM] AT BEGINNING OF STEP
C   YBEG   = Y POSITION [CM] AT BEGINNING OF STEP
C   ZBEG   = Z POSITION [CM] AT BEGINNING OF STEP
C   XEND   = X POSITION [CM] AT END OF STEP
C   YEND   = Y POSITION [CM] AT END OF STEP
C   ZEND   = Z POSITION [CM] AT END OF STEP
C   TBEG   = TIME [NSEC] AT BEGIN OF STEP
C   TEND   = TIME [NSEC] AT END OF STEP
C   AMASS  = PARTICLE MASS [GEV/C**2]
C   CHARGE = CHARGE NUMBER (OR NEGATIVE - WE NEED ONLY THE SQUARE OF IT)
C   WTTHIN = PARTICLE WEIGHT FOR THINNING VERSION, ELSE 1.
C   CTEA   = COSINE OF EARTH ANGLE IN CURVED VERSION, ELSE 1.
C
C  THIS IMPLEMENTATION WRITTEN BY
C       K. BERNLOEHR  MPIK HEIDELBERG (1998)
C  THIS SUBROUTINE IS BASED IN PART ON THE FORMER CHERENKOV ROUTINES
C  CERENE AND CERENH ORIGINALLY WRITTEN BY
C       M. ROZANSKA   UNIVERSITY OF KRAKOW
C       F. ARQUEROS, S. MARTINEZ   UNIVERSITY OF MADRID
C  AND SUBSEQUENTLY MODIFIED BY
C       D. HECK       IK FZK KARLSRUHE
C
C  EXTERNAL IACT (IMAGING ATMOSPHERIC CHERENKOV TECHNIQUE) FUNCTIONS
C  FOR COLLECTING PHOTON BUNCHES AT ARBITRARY TELESCOPE LOCATIONS
C  WRITTEN (IN C) BY  K. BERNLOEHR  MPIK HEIDELBERG (1997)
C  AND AVAILABLE SEPARATELY.
C  THE SAME APPLIES TO FUNCTIONS FOR TABULATED ATMOSPHERIC MODELS AND
C  FUNCTIONS TO ACCOUNT FOR THE ATMOSPHERIC REFRACTION.
C-----------------------------------------------------------------------

      IMPLICIT NONE
#define __CEREN1INC__
#define __CEREN2INC__
#define __EGSDEBINC__
#define __LONGIINC__
#define __OBSPARINC__
#define __PARPARINC__
#define __RUNPARINC__
#if __CERENKOV__
#define __CONSTAINC__
#define __MAGANGINC__
#define __RANDPAINC__
#endif
#if __ATMEXT__
#define __ATMOSXINC__
#endif
#if __CURVED__
#define __CORFRAMINC__
#endif
#if __CEFFIC__
#define __CERABSINC__
#endif
#if !__IACT__
#define __CERTELINC__
#define __CEREN3INC__
#endif
#include "corsika.h"

#if __CERENKOV__
      DOUBLE PRECISION PHICER,SINPSI,SINPS2,UEMIS2,VEMIS2,XCER2,YCER2
      DOUBLE PRECISION TC11,TC21,TC12,TC22,TC32,TC13,TC23,TC33
      DOUBLE PRECISION SINPHI,COSPHI,STCP,STSP,THKBEG,DTHKLG,STHETA
#endif
      DOUBLE PRECISION STEPCR
      DOUBLE PRECISION UMEAN,VMEAN,WMEAN
      DOUBLE PRECISION EBEG,EEND
      DOUBLE PRECISION XBEG,YBEG,ZBEG,XEND,YEND,ZEND
      DOUBLE PRECISION TBEG,TEND,AMASS,CHARGE,WTTHIN,CTEA
      DOUBLE PRECISION BETAE,BETAI,CTHETA,ETA1,ETA1I,ETA1E
      DOUBLE PRECISION BETAM,ETA1M
      DOUBLE PRECISION BETA,BETAN,CINTEN,ENER
      DOUBLE PRECISION PHOTCT,PSTEP,PATHL,ZEM
      DOUBLE PRECISION DEDPL,STHET2
      DOUBLE PRECISION BEMX,TEMIS,TSTEP
C  WLFLAG PHOTON/PHOTO-ELECTRON FLAG (OR WAVELENGTH IN NANOMETER)
      DOUBLE PRECISION WLFLAG
#if __CURVED__
      DOUBLE PRECISION AUXILSQ,CDDIF,CDIFA,CDIFB,CUMEAN,CVMEAN,
     *                 CWMEAN,RDIST,SDIFB,STHE,
     *                 ZAPP,ZHBEG,ZHEM,ZHEND,ZHSTEP
#if !__IACT__
      DOUBLE PRECISION SWEMIS,STHE2,ETA2
#endif
#if __CERENKOV__
      DOUBLE PRECISION DISTIP,TOFIP
      EXTERNAL         DISTIP,TOFIP
#endif
#else
#if !__CERWLEN__
      DOUBLE PRECISION ETALI,ETALE,DETAL,BETANI,DBETAN
#endif
      INTEGER          LOOPFL
#if __CERENKOV__
      DOUBLE PRECISION PATHCR,THCKEM
#endif
#endif
#if __CEFFIC__
C  OUTPUT DATA ARE PHOTOELECTRON BUNCHES ORIGINATING FROM PHOTONS
C  OF SPECIFIC WAVELENGTH
      PARAMETER (WLFLAG = -1.D0 )
      LOGICAL          ABSORB
#elif __CERWLEN__
C  OUTPUT DATA ARE PHOTON BUNCHES OF SPECIFIC WAVELENGTH
      PARAMETER (WLFLAG = 1.D0 )
#else
C  OUTPUT DATA ARE PHOTON BUNCHES OF UNSPECIFIED WAVELENGTH
      PARAMETER (WLFLAG = 0.D0 )
#endif
      INTEGER          ISTC,MSTEPC
#if __CERENKOV__
      INTEGER          IRDM,MAXRDM,NRDM
      PARAMETER        ( MAXRDM = 100 )
      DOUBLE PRECISION RDM(MAXRDM)
#if __CERWLEN__
      DOUBLE PRECISION ETCMAX,ETACOR
#endif
      DOUBLE PRECISION XCER1,YCER1,XXX,YYY,DXXX,DYYY
      INTEGER          TELOUT,ITHIT
      EXTERNAL         TELOUT
      INTEGER          I
#endif
#if __ATMEXT__
      DOUBLE PRECISION REFIDX
      EXTERNAL         REFIDX
#endif
      DOUBLE PRECISION RHOF,THICK
      EXTERNAL         RHOF,THICK
      SAVE
C-----------------------------------------------------------------------

#if __GFORTRAN__
CTP060202 TO AVOID WARNINGS WITH GFORTRAN COMPILATION
      LOGICAL          CTP060202

      CTP060202 = .FALSE.
#if __THIN__
      IF ( CTP060202 ) WRITE(*,*) CTEA,UMEAN,VMEAN
#else
      IF ( CTP060202 ) WRITE(*,*) CTEA,UMEAN,VMEAN,WTTHIN
#endif
#endif

      IF ( DEBUG .OR. LCERDB .OR. FEGSDB )
     $           WRITE(MDEBUG,444) EBEG,AMASS,WMEAN,STEPCR
  444 FORMAT(' CERENK: EBEG=',1P,E12.5,' AMASS=',E12.5,' WMEAN=',E12.5,
     $       ' STEPCR=',E12.5)

C  SKIP PARTICLES OUT OF ZENITH ANGULAR CUT (WITH WMEAN>0 DOWNWARDS).
C  NOTE: USUALLY C(29) IS 0, I.E. UPWARD GOING PARTICLES ARE REJECTED.
#if __UPWARD__
      IF ( WMEAN .LT. 0.D0   .OR.  STEPCR .LE. 0.D0 ) RETURN
#else
      IF ( WMEAN .LT. C(29)  .OR.  STEPCR .LE. 0.D0 ) RETURN
#endif

C  LOOK WHETHER CHERENKOV CONDITION IS FULFILLED FOR THIS STEP.
      BETAI = SQRT( (1.D0-(AMASS/EBEG))*(1.D0+(AMASS/EBEG)) )
      BETAE = SQRT( (1.D0-(AMASS/EEND))*(1.D0+(AMASS/EEND)) )

C  REFRACTIVE INDEX PARAMETERISATION: N=1+ETA = ETA1
C  NOTE: ETA = N-1 IS CALLED THE REFRACTIVITY.
#if __ATMEXT__
      IF ( IATMOX .GE. 1 ) THEN
        ETA1I = REFIDX(ZBEG)
        ETA1E = REFIDX(ZEND)
      ELSE
        ETA1I = 1.D0 + ETADSN * RHOF( ZBEG )
        ETA1E = 1.D0 + ETADSN * RHOF( ZEND )
      ENDIF
#else
      ETA1I = 1.D0 + ETADSN * RHOF( ZBEG )
      ETA1E = 1.D0 + ETADSN * RHOF( ZEND )
#endif
#if __CERWLEN__
C  MAXIMUM CORRECTION FACTOR FOR ETA IS FOR SHORTEST WAVELENGTH.
      ETCMAX = 0.967D0 + 0.033D0*(400.D0/WAVLGL)**2.5D0
C  USE MAXIMUM VALUES OVER WAVELENGTH RANGE RATHER THAN TYPICAL VALUES.
C  WE COULD HAVE PARTICLES THAT EMIT ONLY AT THE SHORTEST WAVELENGTHS.
      ETA1I = 1.D0 + (ETA1I-1.D0) * ETCMAX
      ETA1E = 1.D0 + (ETA1E-1.D0) * ETCMAX
#endif
      IF ( BETAI*ETA1I .LT. 1.D0  .AND.  BETAE*ETA1E .LT. 1.D0 ) THEN
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: EXIT1'
        RETURN
      ENDIF
      BETAM = SQRT( 1.D0 - (AMASS*2.D0/(EBEG+EEND))**2 )
#if __ATMEXT__
      IF ( IATMOX .GE. 1 ) THEN
        ETA1M = REFIDX(0.5D0 * (ZBEG+ZEND))
      ELSE
        ETA1M = 1.D0 + ETADSN * RHOF( 0.5D0 * (ZBEG+ZEND) )
      ENDIF
#else
      ETA1M = 1.D0 + ETADSN * RHOF( 0.5D0 * (ZBEG+ZEND) )
#endif
#if __CERWLEN__
      ETA1M = 1.D0 + (ETA1M-1.D0) * ETCMAX
#endif

      BEMX   = MAX( BETAE*ETA1E, BETAI*ETA1I )
      CINTEN = CYIELD * CHARGE**2
      PHOTCT = CINTEN * STEPCR * (1.D0 - 1.D0/BEMX**2)
      MSTEPC = PHOTCT / CERSIZ + 1
      IF ( MSTEPC .LT. 1 ) RETURN
#if __CURVED__
C  TRANSFORM ALL COORDINATES INTO DETECTOR FRAME (IF NOT DONE UNTIL NOW)
C  XBEG, XEND, YBEG, YEND ARE TRANSFORMED IN UPDATE (OR PARTLY IN UPDATC)
      IF ( .NOT. DETSYS ) THEN
C  FIRST TRANSFORM ANGLES INTO DETECTOR FRAME
C  (ROTATE LOCAL FRAME WITH EARTH ANGLE DIF)
        CDIFB = CTEA
        CDIFB = MIN( 1.D0, CDIFB )
        SDIFB = SQRT( (1.D0 - CTEA) * (1.D0 + CTEA) )
        SDIFB = MIN( 1.D0, SDIFB )
        STHE  = SQRT( UMEAN**2 + VMEAN**2 )
        IF ( STHE .GT. 0.D0 ) THEN
          CUMEAN = UMEAN/STHE
          CVMEAN = VMEAN/STHE
          CUMEAN = WMEAN*SDIFB*CUMEAN + CDIFB*STHE*CUMEAN
          CVMEAN = WMEAN*SDIFB*CVMEAN + CDIFB*STHE*CVMEAN
          CWMEAN = WMEAN*CDIFB        - SDIFB*STHE
        ELSE
          CUMEAN = WMEAN*SDIFB*UMEAN
          CVMEAN = WMEAN*SDIFB*VMEAN
          CWMEAN = WMEAN*CDIFB
        ENDIF
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: CURVED; CWMEAN=',CWMEAN
        IF ( CWMEAN .LT. C(29) ) RETURN
C  ZBEG, ZEND IN DETECTOR FRAME (ZHBEG, ZHEND)
C  ACTUAL EARTH ANGLE
        AUXILSQ = SQRT( XBEG**2 + YBEG**2 )
        CDIFA   = COS( AUXILSQ/C(1) )
        IF ( CDIFA .GT. CTEA ) THEN
C  TRANSFORM FIRST INTO THE INTERMEDIATE LOCAL SYSTEM
          CDDIF = CTEA*CDIFA
     *      + SQRT( (1.D0-CTEA)*(1.D0+CTEA)*(1.D0-CDIFA)*(1.D0+CDIFA) )
          ZBEG  = (ZBEG+C(1)) / CDDIF - C(1)
          ZEND  = (ZEND+C(1)) / CDDIF - C(1)
        ENDIF
        ZHBEG = (ZBEG+C(1)) * CDIFA - C(1)
        IF ( ZHBEG .LE. OBSLEV(1) ) RETURN
C  TAKE EARTH ANGLE OF END POINT OF PART OF TRACK FOR CALCULATING ZHEND
        AUXILSQ = SQRT( XEND**2 + YEND**2)
        ZHEND   = (ZEND+C(1)) * COS( AUXILSQ/C(1) ) - C(1)
C  NOW TRANSFORM CURVED COORDINATES INTO FLAT COORDINATE FRAME
C  TAKING THE NOW AVAILABLE VALUES OF HAPP (X = X(HAPP))
        XBEG = (ZHBEG+C(1)) * TAN( XBEG/C(1) )
        YBEG = (ZHBEG+C(1)) * TAN( YBEG/C(1) )
        XEND = (ZHEND+C(1)) * TAN( XEND/C(1) )
        YEND = (ZHEND+C(1)) * TAN( YEND/C(1) )
      ENDIF
      DEDPL  = (EEND-EBEG) / STEPCR
#else
C  NOW CHECK WHICH KIND OF CALCULATING (BETA*N) FOR EACH SUB-STEP
C  IS LIKELY TO BE THE MOST EFFICIENT.
C  CASE 0: ONLY ONE STEP - WE HAVE ALREADY THE NUMBERS AT MID-STEP.
#if __UPWARD__
      IF ( WMEAN .GT. 0.D0 ) THEN
#endif
      IF     ( MSTEPC .EQ. 1 ) THEN
        LOOPFL = 0
#if __CERWLEN__
C  WITH EXPLICIT WAVELENGTH DEPENDENCE, WE NEED A DIFFERENT
C  WAVELENGTH AND REFRACTIVE INDEX FOR EACH STEP.
#else
C  CASE 1: LINEAR INTERPOLATION OF (BETA*N) IF THE RELATIVE ERROR ON
C  THE LIGHT INTENSITY IN THE MIDDLE IS LESS THAN 1E-3 (THEN THE ERROR
C  ON THE IMPACT POINT FOR VERTICAL INCIDENCE IS LESS THAN ABOUT 5 CM).
      ELSEIF ( (BETAE*ETA1E) .GT. 1.D0  .AND.  (BETAI*ETA1I) .GT. 1.D0
     *      .AND.  (BETAM*ETA1M) .GT. 1.D0  .AND.
     *    ABS((2.D0-1.D0/(BETAI*ETA1I)**2-1.D0/(BETAE*ETA1E)**2)/
     *    (1.D0-1.D0/(BETAM*ETA1M)**2)-2.D0) .LT. 2.D-3*WMEAN ) THEN
        LOOPFL = 1
        DBETAN = (BETAE*ETA1E-BETAI*ETA1I) / STEPCR
        BETANI = BETAI * ETA1I
        DEDPL  = (EEND-EBEG) / STEPCR
C  CASE 2: LOGARITHMIC INTERPOLATION OF (N-1) IS GOOD ENOUGH FOR
C  ERRORS ON THE IMPACT POINT BEING LESS THAN 10 CM.
C  BETA IS CALCULATED EXPLICITLY ASSUMING CONSTANT ENERGY LOSS.
C  NOTE THAT WE USE CONSTANT ENERGY LOSS PER CENTIMETER RATHER THAN
C  PER UNIT G/CM**2 FOR EFFICIENCY REASONS. THE POSSIBLE DIFFERENCE
C  OF ENERGY AT MIDDLE OF STEP SHOULD BE INSIGNIFICANT IN ALMOST
C  ANY CASE.
      ELSEIF ( ZBEG**2*ABS((ETA1I-1.D0)*(ETA1E-1.D0)/(ETA1M-1.D0)**2
     *         - 1.D0) .LT. (10.D0*ABS(WMEAN))**2 ) THEN
        LOOPFL = 2
        ETALI  = LOG( ETA1I-1.D0 )
        ETALE  = LOG( ETA1E-1.D0 )
        DETAL  = (ETALE-ETALI) / STEPCR
        DEDPL  = (EEND-EBEG) / STEPCR
      ELSE
C  CASE 3: BOTH N AND BETA HAVE TO BE CALCULATED IN FULL DETAIL.
#endif
        LOOPFL = 3
        DEDPL  = (EEND-EBEG) / STEPCR
      ENDIF
#if __UPWARD__
        IF ( LCERDB ) WRITE(MDEBUG,*)
     *          'CERENK: LOOPFL=',LOOPFL,' DEDPL=',DEDPL
      ENDIF
#endif
#endif

C  VARIOUS START VALUES AND STEP LENGTHS FOR SUB-STEP LOOP
      TSTEP  = (TEND-TBEG) * (1.D0/DBLE(MSTEPC))
      XSTEP  = (XEND-XBEG) * (1.D0/DBLE(MSTEPC))
      YSTEP  = (YEND-YBEG) * (1.D0/DBLE(MSTEPC))
      ZSTEP  = (ZEND-ZBEG) * (1.D0/DBLE(MSTEPC))
      PSTEP  = STEPCR * (1.D0/DBLE(MSTEPC))
      PATHL  = (-0.5D0) * PSTEP
      TEMIS  = TBEG - 0.5D0*TSTEP
      XSTEP2 = 0.5D0 * XSTEP
      XEMIS  = XBEG - XSTEP2
      YSTEP2 = 0.5D0 * YSTEP
      YEMIS  = YBEG - YSTEP2
      ZSTEP2 = 0.5D0 * ZSTEP
      ZEM    = ZBEG - ZSTEP2
#if __CERENKOV__
#if __CURVED__
C  THE TC.. ELEMENTS ARE DESCRIBED FURTHER DOWN.
      IF ( .NOT. DETSYS ) THEN
        ZHSTEP = (ZHEND-ZHBEG) * (1.D0/DBLE(MSTEPC))
        ZHEM   = ZHBEG - 0.5D0*ZHSTEP
        IF ( ZHEM .LE. OBSLEV(1) ) RETURN
        SINPS2 = MAX( 1.D-20, CUMEAN**2 + CVMEAN**2 )
        SINPSI = SQRT( SINPS2 )
        TC11 = CVMEAN*(1.D0/SINPSI)
        TC12 = CUMEAN*CWMEAN*(1.D0/SINPSI)
        TC13 = CUMEAN
        TC21 = (-CUMEAN)*(1.D0/SINPSI)
        TC22 = CVMEAN*CWMEAN*(1.D0/SINPSI)
        TC23 = CVMEAN
        TC32 = -SINPSI
        TC33 = CWMEAN
      ELSE
#else
C  THE TC.. ELEMENTS ARE DESCRIBED FURTHER DOWN.
#endif
       SINPS2 = MAX( 1.D-20, UMEAN**2 + VMEAN**2 )
       SINPSI = SQRT( SINPS2 )
       TC11 = VMEAN*(1.D0/SINPSI)
       TC12 = UMEAN*WMEAN*(1.D0/SINPSI)
       TC13 = UMEAN
       TC21 = (-UMEAN)*(1.D0/SINPSI)
       TC22 = VMEAN*WMEAN*(1.D0/SINPSI)
       TC23 = VMEAN
       TC32 = -SINPSI
       TC33 = WMEAN
#if __CURVED__
      ENDIF
#endif

C  SINCE EXPONENTIAL ATMOSPHERIC LAYERS ARE ASSUMED, A LOGARITHMIC
C  INTERPOLATION OF THE ATMOSPHERIC THICKNESS CAN BE APPLIED.
      IF ( MSTEPC .GT. 3 ) THEN
        THKBEG = MAX( 1.D-3, THICK( ZBEG ) )
        DTHKLG = LOG( THICK( ZEND )/THKBEG ) / STEPCR
      ENDIF

C  DON''T GET RANDOM NUMBERS ONE-BY-ONE BUT IN LARGER CHUNKS.
#if __CERWLEN__
      NRDM = 2*MSTEPC
#else
      NRDM = MSTEPC
#endif
      IRDM = 0
      IF ( NRDM .GT. MAXRDM ) THEN
        CALL RMMARD( RDM,MAXRDM,3 )
      ELSE
        CALL RMMARD( RDM,NRDM,3 )
      ENDIF
#endif

C  LOOP OVER THE NUMBER OF SUB-STEPS WITH CONSTANT PARTICLE DIRECTION
C  BUT CONTINUOUS ENERGY LOSS AND REFRACTION INDEX CHANGE ARE ACCOUNTED FOR.
C  SINCE ACTUAL VELOCITY CHANGES OF PARTICLES EMITTING CHERENKOV LIGHT
C  IN THE ATMOSPHERE ARE VERY SMALL, CONSTANT STEPS IN (X,Y,Z,T) ARE USED.
      DO  1000  ISTC = 1, MSTEPC
#if  __CEFFIC__ && __CERENKOV__
C  WAVELENGTH OF THE EMITTED PHOTON
        CALL CESPEC( WL )
        IF ( CERQEF  .OR.  CERMIR ) THEN
C  APPLY TELESCOPE EFFICIENCY
          CALL TELEFF( ABSORB )
          IF ( ABSORB ) GOTO 1000
        ENDIF
#endif
        PATHL = PATHL + PSTEP
        XEMIS = XEMIS + XSTEP
        YEMIS = YEMIS + YSTEP
        ZEM   = ZEM   + ZSTEP
        TEMIS = TEMIS + TSTEP
#if __CURVED__
        IF ( .NOT. DETSYS ) THEN
          ZHEM = ZHEM + ZHSTEP
          IF ( ZHEM .LE. OBSLEV(1) ) RETURN
        ENDIF
#else
#if !__CERWLEN__
C  DEPENDING ON CONDITIONS USE THE FASTEST METHOD TO GET (BETA*N).
        IF     ( LOOPFL .EQ. 1 ) THEN
C  THE MOST FREQUENT AND SIMPLEST CASE (WELL ABOVE THRESHOLD).
          BETAN = BETANI + DBETAN*PATHL
        ELSEIF ( MSTEPC .EQ. 1 ) THEN
C  THIS CASE IS USALLY ENCOUNTERED NEAR THRESHOLD.
          BETAN = BETAM*ETA1M
        ELSEIF ( LOOPFL .EQ. 2 ) THEN
C  THIS CASE IS ALSO USALLY ENCOUNTERED NEAR THRESHOLD.
          ETA1  = 1.D0 + EXP( ETALI+DETAL*PATHL )
          ENER  = EBEG + DEDPL*PATHL
          BETA  = SQRT( (1.D0-(AMASS/ENER))*(1.D0+(AMASS/ENER)) )
          BETAN = BETA*ETA1
        ELSE
C  THIS MOST GENERAL CASE IS RARELY ENCOUNTERED.
#endif
#endif
#if __ATMEXT__
          IF ( IATMOX .GE. 1 ) THEN
            ETA1 = REFIDX(ZEM)
          ELSE
            ETA1 = 1.D0 + ETADSN * RHOF( ZEM )
          ENDIF
#else
          ETA1  = 1.D0 + ETADSN * RHOF( ZEM )
#endif
          ENER  = EBEG + DEDPL*PATHL
          BETA  = SQRT( (1.D0-(AMASS/ENER))*(1.D0+(AMASS/ENER)) )
#if __CERWLEN__
#if __CEFFIC__ && __CERENKOV__
C  THE WAVELENGTH WAS THROWN BEFORE. WE JUST HAVE TO CALCULATE THE
C  WAVELENGTH-DEPENDENT REFRACTIVE INDEX.
#else
C  DON''T GET RANDOM NUMBERS ONE-BY-ONE BUT IN LARGER CHUNKS FROM SEQ. 3
          IRDM = IRDM + 1
          IF ( IRDM .GT. MAXRDM ) THEN
            IF ( NRDM .GT. MAXRDM ) THEN
              CALL RMMARD( RDM,MAXRDM,3 )
              NRDM = NRDM - MAXRDM
            ELSE
              CALL RMMARD( RDM,NRDM,3 )
              NRDM = 0
            ENDIF
            IRDM = 1
          ENDIF
C  THROW A RANDOM WAVELENGTH AND CALCULATE THE WAVELENGTH-DEPENDENT
C  REFRACTIVE INDEX.
          WL = 1.D0/(1.D0/WAVLGU+(1.D0/WAVLGL-1.D0/WAVLGU)*RDM(IRDM))
#endif
          ETACOR= 0.967D0 + 0.033D0*(400.D0/WL)**2.5D0
          ETA1  = 1.D0 + (ETA1-1.D0)*ETACOR
#endif
          BETAN = BETA*ETA1
#if __CURVED__
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: BETAN=',BETAN
#else
#if !__CERWLEN__
        ENDIF
#endif
        IF ( LCERDB ) WRITE(MDEBUG,*)
     *                  'CERENK: LOOPFL=',LOOPFL,' BETAN=',BETAN
#endif
        CTHETA = 1.D0 / BETAN
        STHET2 = ( 1.D0 - CTHETA ) * ( 1.D0 + CTHETA )
C  PARTICLE IS BELOW ENERGY THRESHOLD IF THE EMISSION ANGLE IS <=0
        IF ( CTHETA .GT. 1.D0  .OR.  STHET2 .LE. 0.D0 ) THEN
#if __CERENKOV__
#if __CERWLEN__
          NRDM = NRDM - 2
#else
          NRDM = NRDM - 1
#endif
#endif
          GOTO 1000
        ENDIF
C  NUMBER OF EMITTED PHOTONS IN THIS SUB-STEP
        PHOTCM = (CINTEN*PSTEP) * STHET2
C  ASSUME EMISSION POINT OF ALL PHOTONS IN THE MIDDLE OF THE STEP
#if __CURVED__
C  SAVE EMMISION HEIGHT SEEN FROM THE DETECTOR
        IF ( .NOT. DETSYS ) THEN
          ZEMIS = ZHEM
          ZAPP  = ZHEM
        ELSE
          ZEMIS = ZEM
          ZAPP  = ZEM
        ENDIF
#else
        ZEMIS  = ZEM
#endif

#if __CERENKOV__
        STHETA = SQRT( STHET2 )
C  CALCULATE PHOTON DIRECTION IN THE CORSIKA COORDINATE FRAME
C
C  NOTE: TO DERIVE THESE EQUATIONS YOU SHOULD FIRST DERIVE A MATRIX (T)
C  WHICH ROTATES THE PARTICLE DIRECTION (U, V, W) TO (0, 0, 1):
C
C        (  V/SQRT(U**2+V**2)    -U/SQRT(U**2+V**2)         0          )
C  (T) = ( UW/SQRT(U**2+V**2)    VW/SQRT(U**2+V**2)  -SQRT(U**2+V**2)  )
C        (       U                       V                  W          )
C
C  CHERENKOV EMISSION IN THIS ROTATED COORDINATE SYSTEM IS DESCRIBED BY
C  A MATRIX (C):
C
C        ( COS(PHI)  -SIN(PHI)   0  )  (  COS(THETA)   0   SIN(THETA)  )
C  (C) = ( SIN(PHI)   COS(PHI)   0  )  (     0         1      0        )
C        (    0          0       1  )  ( -SIN(THETA)   0   COS(THETA)  )
C
C  WHERE THETA IS THE CHERENKOV OPENING ANGLE AND PHI IS RANDOM.
C  THE RESULT IS (T_T)**-1  (C) (0,0,1):
C
C                (0)
C  (T_T)**-1 (C) (0) =
C                (1)
C
C                ( V/S*SIN(T)*COS(PHI)+U*W/S*SIN(T)*SIN(PHI)+U*COS(T) )
C              = (-U/S*SIN(T)*COS(PHI)+V*W/S*SIN(T)*SIN(PHI)+V*COS(T) )
C                (                        -S*SIN(T)*SIN(PHI)+W*COS(T) )
C
C  WITH S = SQRT(U**2+V**2) AND T=THETA. THE CONSTANT PARTS ARE CALCULATED
C  AS TC11 ... TC33 BEFORE THE '1000' LOOP.

C  DON''T GET RANDOM NUMBERS ONE-BY-ONE BUT IN LARGER CHUNKS FROM SEQ. 3
        IRDM = IRDM + 1
        IF ( IRDM .GT. MAXRDM ) THEN
          IF ( NRDM .GT. MAXRDM ) THEN
            CALL RMMARD( RDM,MAXRDM,3 )
            NRDM = NRDM - MAXRDM
          ELSE
            CALL RMMARD( RDM,NRDM,3 )
            NRDM = 0
          ENDIF
          IRDM = 1
        ENDIF
        PHICER = RDM(IRDM) * PI2
        SINPHI = SIN( PHICER )
        COSPHI = COS( PHICER )

        IF ( SINPS2 .LE. 1.D-12 ) THEN
          UEMIS2 = STHETA * COSPHI
          VEMIS2 = STHETA * SINPHI
          WEMIS  = CTHETA
          IF ( WMEAN .LT. 0.D0 ) WEMIS = -CTHETA
        ELSE
          STCP   = STHETA * COSPHI
          STSP   = STHETA * SINPHI
          UEMIS2 = TC11*STCP + TC12*STSP + TC13*CTHETA
          VEMIS2 = TC21*STCP + TC22*STSP + TC23*CTHETA
          WEMIS  =             TC32*STSP + TC33*CTHETA
        ENDIF
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: UEMIS2,VEMIS2,WEMIS=',
     *                                         UEMIS2,VEMIS2,WEMIS
C  EMISSION ANGLE WITHIN ZENITH ANGULAR CUT?
#if __UPWARD__
C  WE MAY HAVE UPWARD PARTICLES BUT UPWARD PHOTONS ARE USELESS.
        IF ( WEMIS .LT. C(29)  .OR.  WEMIS .LE. 0.D0 ) GOTO 1000
#else
        IF ( WEMIS .LT. C(29) ) GOTO 1000
#endif
        WEMIS = MIN( 1.D0, WEMIS )
#if __CEFFIC__
C  APPLY ATMOSPHERIC ABSORPTION
        IF ( CERATA ) THEN
          CALL ATABSO( ABSORB )
          IF ( ABSORB ) GOTO 1000
        ENDIF
#endif

C  CALCULATE OFFSET FROM SHOWER AXIS AT THE DETECTOR LEVEL.
#if __CURVED__
C  CALCULATE NEW DETECTOR COORDINATES BY INTERPOLATING BETWEEN
C  TABULATED VALUES WHICH WERE NUMERICALLY INTEGRATED
C  TAKING INTO ACCOUNT ATMOSPHERIC REFRACTION IN A CURVED GEOMETRY
        STHE  = SQRT( UEMIS2**2 + VEMIS2**2 )
        RDIST = DISTIP( WEMIS, ZAPP)
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: WEMIS,ZEM,STHE,RDIST=',
     *                                         WEMIS,ZEM,STHE,RDIST
        IF ( STHE .GT. 0.D0 ) THEN
C  UEMIS2=COSPHI, VEMIS2=SINPHI
          XCER2 = XEMIS + RDIST/STHE * UEMIS2
          YCER2 = YEMIS + RDIST/STHE * VEMIS2
        ELSE
          XCER2 = XEMIS
          YCER2 = YEMIS
        ENDIF
C  CERDIST IS SLANT DISTANCE TO DETECTOR MIDDLE
        CERDIST = ( ZAPP - OBSLEV(NOBSLV) ) / WEMIS
#else
        PATHCR  = ( ZEM - OBSLEV(NOBSLV) ) / WEMIS
        XCER2   = XEMIS + PATHCR * UEMIS2 - XOFF(NOBSLV)
        YCER2   = YEMIS + PATHCR * VEMIS2 - YOFF(NOBSLV)
C  CERDIST IS SLANT DISTANCE TO DETECTOR MIDDLE
        CERDIST = PATHCR
#endif
#endif
#if __THIN__
C  IN CERLDE, CERLDH, AND OUTPT2 THE VARIABLE WTCER IS USED.
        WTCER   = WTTHIN
#endif
#if !__NOCLONG__
C  ADD THE CHERENKOV PHOTONS TO THE LONGITUDINAL DEVELOPMENT.
        IF ( LLONGI ) THEN
          CALL CERLDE
        ENDIF
#endif
#if __CERENKOV__
C  TAKE THE ROTATION RELATIVE TO MAGNETIC NORTH INTO ACCOUNT
        XCER  = XCER2  * COSANG + YCER2  * SINANG
        YCER  = YCER2  * COSANG - XCER2  * SINANG
        UEMIS = UEMIS2 * COSANG + VEMIS2 * SINANG
        VEMIS = VEMIS2 * COSANG - UEMIS2 * SINANG
        IF ( LCERDB ) WRITE(MDEBUG,*) 'CERENK: UEMIS,VEMIS,PHOTCM=',
     *                          SNGL(UEMIS),SNGL(VEMIS),SNGL(PHOTCM)
#if __IACT__
C  BUNCH COULD FALL ON A TELESCOPE, CALCULATE ARRIVAL TIME (NSEC).
C  NOTE: C(25) IS VELOCITY OF LIGHT IN CM/SEC.
#if __ATMEXT__
C  ATMOSPHERIC BENDING CORRECTION WORKS BOTH WITH CORSIKA BUILT-IN
C  ATMOSPHERIC MODELS AND WITH EXTERNAL TABLES BUT THE TABLES ARE
C  FAR MORE ACCURATE. YOU NEED TO ENABLE IT WITH THE SECOND
C  PARAMETER OF THE ATMOSPHERE DATA CARD, E.G. 'ATMOSPHERE 0 T'

        IF ( FREFRX ) THEN
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
          CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
          CARTIM = TEMIS * 1.D9
C  TAKE BENDING OF RAY BY ATMOSPHERIC REFRACTION INTO ACCOUNT.
C  THE ARRIVAL DIRECTION, THE ARRIVAL POSITION AND THE ARRIVAL
C  TIME ARE CORRECTED.
          CALL RAYBND( ZEM,UEMIS,VEMIS,WEMIS,XCER,YCER,CARTIM )
#endif
        ELSE
#endif
C  WITHOUT REFRACTION CODE OR IF DESELECTED FALL BACK TO THE OLD METHOD.
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
         CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
         IF ( MSTEPC .GT. 3 ) THEN
           THCKEM = THKBEG * EXP( DTHKLG*PATHL )
         ELSE
           THCKEM = THICK( ZEM )
         ENDIF
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
         CARTIM = (TEMIS + (ETADSN*(THCKOB(NOBSLV)-THCKEM)
     *                               /WEMIS+PATHCR)/C(25))* 1.D9
#endif
#if __ATMEXT__
        ENDIF
#endif
#if __THIN__
        ITHIT = TELOUT( PHOTCM,WTCER,XCER,YCER,
#else
        ITHIT = TELOUT( PHOTCM,1.D0,XCER,YCER,
#endif
     *                  UEMIS,VEMIS,CARTIM,ZEMIS,
#if __CEFFIC__ || __CERWLEN__
     *                  WL*WLFLAG
#else
     *                  WLFLAG
#endif
#if __IACTEXT__
     *                  ,TEMIS,
     *                  EBEG + (EEND-EBEG)*(ZEM-ZBEG)/(ZEND-ZBEG),
     *                  AMASS,CHARGE
#endif
     *                )
C  WHETHER THE PHOTON BUNCH SHOULD BE OUTPUT VIA THE OUTPT2 FUNCTION
C  DEPENDS ON THE RETURN CODE FROM TELOUT. IF STORING OF BUNCHES IS
C  DONE ALREADY IN TELOUT, ITHIT=0 WOULD INDICATE NO TELESCOPE WAS HIT
C  AND ITHIT=1 THAT A TELESCOPE WAS HIT BUT CORSIKA SHOULD NOT CARE
C  ABOUT OUTPUT FOR THIS PHOTON BUNCH, EXCEPT TO REMEMBER THE TOTALS.
        IF ( ITHIT .EQ. 1  .OR.  ITHIT .EQ. 3 ) THEN
          IF ( AMASS .LT. 1.D-3 ) THEN
            CERELE = CERELE + PHOTCM
          ELSE
            CERHAD = CERHAD + PHOTCM
          ENDIF
        ENDIF
        IF ( ITHIT .GE. 2 ) CALL OUTPT2(1)
#else
C  WE ARE NOT IN IACT OPTION
C  CHECK WHETHER WE HAVE CHERENKOV TELESCOPES (WITHOUT IACT)
        IF ( NCERTEL .GT. 0 ) THEN
          ITHIT = 0
C  EQUAL < 0 MEANS THE PHOTON SHOULD NOT BE SAVED, WHILE
C  OTHERWISE THE CERTELID OF THE HIT TELESCOPE IS RETURNED
C  (as specified in the steering card)
          ITHIT = TELOUT( XCER,YCER,UEMIS,VEMIS )
          IF ( ITHIT .GE. 0 ) THEN             ! WE HAVE HIT A TELESCOPE
            IF ( AMASS .LT. 1.D-3 ) THEN
              CERELE = CERELE + PHOTCM
            ELSE
              CERHAD = CERHAD + PHOTCM
            ENDIF
C  NO FURTHER CORRECTIONS, SEE CHER-ARRAY (!) ONLY CARTIM NEEDED
#if __ATMEXT__
            IF ( FREFRX ) THEN
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
              CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
              CARTIM = TEMIS * 1.D9
              CALL RAYBND( ZEMIS,UEMIS,VEMIS,WEMIS,XCER,
     *                YCER,CARTIM )
#endif
            ELSE
#endif
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
              CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
              IF ( MSTEPC .GT. 3 ) THEN
                THCKEM = THKBEG * EXP( DTHKLG*PATHL )
              ELSE
                THCKEM = THICK( ZEM )
              ENDIF
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
              CARTIM = (TEMIS + (ETADSN*(THCKOB(NOBSLV)-THCKEM)
     *                /WEMIS+PATHCR)/C(25)) * 1.D9
#endif
#if __ATMEXT__
            ENDIF
#endif
#if __CURVED__
C  CORRECT ZENITH ANGLE DUE TO ATMOSPHERIC REFRACTION FOR OUTPUT
#if __ATMEXT__
            IF ( IATMOX .GE. 1 ) THEN
              ETA2 = REFIDX( OBSLEV(1) )
            ELSE
              ETA2 = 1.D0 + ETADSN * RHOF( OBSLEV(1) )
            ENDIF
#else
            ETA2   = 1.D0 + ETADSN * RHOF( OBSLEV(1) )
#endif
            SWEMIS = ( 1.D0 - WEMIS ) * ( 1.D0 + WEMIS )
            SWEMIS = (ETA1/ETA2)**2 * SWEMIS
            WEMIS  = MIN( 1.D0, SQRT( 1.D0 - SWEMIS ) )
C  NOW CORRECT ALSO THE OTHER DIRECTION COSINE
            STHE   = SQRT( VEMIS**2 + UEMIS**2 )
            STHE2  = SQRT( (1.D0-WEMIS)*(1.D0+WEMIS) )
            VEMIS  = VEMIS/STHE * STHE2
            UEMIS  = UEMIS/STHE * STHE2
#endif
            CALL OUTPT2( cerbuf(ITHIT) )
            GOTO 1000
          ENDIF        ! END OF CASE HITTING A TELESCOPE

        ELSE
C  HERE WE CONSIDER THE NON-TELESCOPE CASE
C  ONLY PHOTON BUNCHES INSIDE CHERENKOV ARRAY
          IF ( ABS(XCER).LT.XCMAXS  .AND.  ABS(YCER).LT.YCMAXS ) THEN
            IF ( AMASS .LT. 1.D-3 ) THEN
              CERELE = CERELE + PHOTCM
            ELSE
              CERHAD = CERHAD + PHOTCM
            ENDIF
            DO  7001  I = 1, ICERML
              XCER1 = XCER - CERXOS(I)
              XXX   = XCER1 * DCERXI + FCERX
              DXXX  = ABS( XXX - NINT( XXX ) )
              IF ( DXXX .LE. EPSX ) THEN
                IF ( XCER1.LT.-XCMAX  .OR.  XCER1.GT.XCMAX ) GOTO 7001
                YCER1 = YCER - CERYOS(I)
                YYY   = YCER1 * DCERYI + FCERY
                DYYY  = ABS( YYY - NINT( YYY ) )
                IF ( DYYY .LE. EPSY ) THEN
                  IF ( YCER1.LT.-YCMAX  .OR.  YCER1.GT.YCMAX ) GOTO 7001
C  BUNCH FALLS ON A DETECTOR, CALCULATE ARRIVAL TIME (NSEC)
#if __ATMEXT__
                  IF ( FREFRX ) THEN
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
                    CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
                    CARTIM = TEMIS * 1.D9
                    CALL RAYBND( ZEMIS,UEMIS,VEMIS,WEMIS,XCER,
     *                                                  YCER,CARTIM )
#endif
                  ELSE
#endif
#if __CURVED__
C  CALCULATE TIME OF FLIGHT BY INTERPOLATING BETWEEN TABULATED VALUES
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
                    CARTIM = TEMIS * 1.D9 + TOFIP(WEMIS,ZAPP)
#else
                    IF ( MSTEPC .GT. 3 ) THEN
                      THCKEM = THKBEG * EXP( DTHKLG*PATHL )
                    ELSE
                      THCKEM = THICK( ZEM )
                    ENDIF
C  TEMIS IS IN SECONDS, CARTIM IS IN NANOSECONDS.
                    CARTIM = (TEMIS + (ETADSN*(THCKOB(NOBSLV)-THCKEM)
     *                                 /WEMIS+PATHCR)/C(25)) * 1.D9
#endif
#if __ATMEXT__
                  ENDIF
#endif
#if __CURVED__
C  CORRECT ZENITH ANGLE DUE TO ATMOSPHERIC REFRACTION FOR OUTPUT
#if __ATMEXT__
                  IF ( IATMOX .GE. 1 ) THEN
                    ETA2 = REFIDX( OBSLEV(1) )
                  ELSE
                    ETA2 = 1.D0 + ETADSN * RHOF( OBSLEV(1) )
                  ENDIF
#else
                  ETA2   = 1.D0 + ETADSN * RHOF( OBSLEV(1) )
#endif
                  SWEMIS = ( 1.D0 - WEMIS ) * ( 1.D0 + WEMIS )
                  SWEMIS = (ETA1/ETA2)**2 * SWEMIS
                  WEMIS  = MIN( 1.D0, SQRT( 1.D0 - SWEMIS ) )
C  NOW CORRECT ALSO THE OTHER DIRECTION COSINE
                  STHE   = SQRT( VEMIS**2 + UEMIS**2 )
                  STHE2  = SQRT( (1.D0-WEMIS)*(1.D0+WEMIS) )
                  VEMIS  = VEMIS/STHE * STHE2
                  UEMIS  = UEMIS/STHE * STHE2
#endif
                  CALL OUTPT2( 1 )
                  GOTO 1000
                ENDIF
              ENDIF
 7001       CONTINUE
          ENDIF                   ! END OF CASE PHOTON INSIDE ARRAY
        ENDIF                   !END OF NON-TELESCOPE CASE
#endif
#endif
1000  CONTINUE

      RETURN
      END
#endif

#if ( __CERENKOV__ && !__NOCLONG__ ) || ( __AUGCERLONG__ && !__NOCLONG__ )
*-- Author :    K. BERNLOEHR MPIK HEIDELBERG    15/06/1998
C=======================================================================

      SUBROUTINE CERLDE

C-----------------------------------------------------------------------
C  C(H)ER(ENKOV) L(ONGITUNAL) DE(VELOPMENT)
C
C  THIS SUBROUTINE IS CALLED FROM CERENK.
C-----------------------------------------------------------------------

      IMPLICIT NONE
#define __CEREN2INC__
#define __LONGIINC__
#define __PARPARINC__
#include "corsika.h"

      DOUBLE PRECISION PHOTB,PHOTB1,PHOTBN,STEPT,THCKHN,THCKHO
      INTEGER          IL,LPCT1,LPCT2
#if __SLANT__
#if __CURVED__
      DOUBLE PRECISION PHI1,RRR,WANEW,WAOLD,XNEW,XOLD,XXX,
     *                 YNEW,YOLD,YYY,ZAPNEW,ZAPOLD,ZNEW,ZOLD
#endif
      DOUBLE PRECISION AUXNEW,AUXOLD,THCKSI
      INTEGER          LBIN
      EXTERNAL         LBIN,THCKSI
#else
      DOUBLE PRECISION THICK
      EXTERNAL         THICK
#endif
      SAVE
C-----------------------------------------------------------------------

#if __SLANT__
#if __CURVED__
C  CALCULATE AUXILIAR QUANTITIES AT BEGIN OF STEP
      XOLD   = XEMIS-XSTEP2
      YOLD   = YEMIS-YSTEP2
      ZOLD   = ZEMIS-ZSTEP2
      WAOLD  = COS( SQRT( XOLD**2 + YOLD**2 ) / C(1) )
      ZAPOLD = ( C(1) + ZOLD ) * WAOLD - C(1)
      IF ( WAOLD .NE. 1.D0 ) THEN
C  WE ARE AWAY FROM DETECOR
C  CALCULATE AZIMUTH ANGLE OF PARTICLE SEEN FROM DETECTOR
        IF ( YOLD .NE. 0.D0  .OR.  XOLD .NE. 0.D0 ) THEN
          PHI1 = ATAN2( YOLD, XOLD )
        ELSE
          PHI1 = 0.D0
        ENDIF
C  HORIZONTAL DISTANCE OF PARTICLE TO DETECTOR
        RRR = SQRT( (1.D0-WAOLD)*(1.D0+WAOLD) )
     *                                  * ( C(1) + ZAPOLD ) / WAOLD
        XXX = RRR * COS( PHI1 )
        YYY = RRR * SIN( PHI1 )
      ELSE
C  WE ARE IN THE DETECTOR SYSTEM AND NEED NO COORDINATE CALCULATION
        XXX = XOLD
        YYY = YOLD
      ENDIF
C  LOOK FOR SLANT THICKNESS OF BEGIN OF STEP
      AUXOLD = XXX * STHCPH + YYY * STHSPH - ZAPOLD * CTH + RLOFF
C  FIND FIRST THE EQUIVALENT LEVELS
C  THE PARTICLE IS TRACKED FROM ZEMIS-ZSTEP2 DOWN TO ZEMIS+ZSTEP2
      THCKHO = THCKSI( AUXOLD )
      LPCT1  = MIN( INT( THCKHO*THSTPI + 1.D0 ), NSTEP+1 )
#else
C  LOOK FOR SLANT THICKNESS OF BEGIN OF STEP
      AUXOLD = (XEMIS-XSTEP2)*STHCPH + (YEMIS-YSTEP2)*STHSPH
     *          - (ZEMIS-ZSTEP2)*CTH + RLOFF
#endif
C  IF STARTING POINT BEYOND FURTHEST LEVEL THEN DON''T CHECK
      IF ( RLONG(NSTEP) .GT. AUXOLD ) THEN
#if __CURVED__
        XNEW   = XEMIS+XSTEP2
        YNEW   = YEMIS+YSTEP2
        ZNEW   = ZEMIS+ZSTEP2
        WANEW  = COS( SQRT( XNEW**2 + YNEW**2 ) / C(1) )
        ZAPNEW = ( C(1) + ZNEW ) * WANEW - C(1)
C  CALCULATE AUXILIAR QUANTITIES AT END OF STEP
        IF ( WANEW .NE. 1.D0 ) THEN
C  WE ARE AWAY FROM DETECOR
C  CALCULATE AZIMUTH ANGLE OF PARTICLE SEEN FROM DETECTOR
          IF ( YNEW .NE. 0.D0  .OR.  XNEW .NE. 0.D0 ) THEN
            PHI1 = ATAN2( YNEW, XNEW )
          ELSE
            PHI1 = 0.D0
          ENDIF
C  HORIZONTAL DISTANCE OF PARTICLE TO DETECTOR
          RRR = SQRT( (1.D0-WANEW)*(1.D0+WANEW) )
     *                                  * ( C(1) + ZAPNEW ) / WANEW
          XXX = RRR * COS( PHI1 )
          YYY = RRR * SIN( PHI1 )
        ELSE
C  WE ARE IN THE DETECTOR SYSTEM AND NEED NO COORDINATE CALCULATION
          XXX = XNEW
          YYY = YNEW
        ENDIF
C  SLANT THICKNESS AT END OF STEP
        AUXNEW = XXX*STHCPH + YYY*STHSPH - ZAPNEW*CTH + RLOFF
        THCKHN = THCKSI( AUXNEW )
        LPCT2  = MIN( INT( THCKHN*THSTPI ), NSTEP )
#else
C  SLANT THICKNESS AT END OF STEP
        AUXNEW = (XEMIS+XSTEP2)*STHCPH + (YEMIS+YSTEP2)*STHSPH
     *            - (ZEMIS+ZSTEP2)*CTH + RLOFF
C  FIND FIRST THE EQUIVALENT LEVELS
C  THE PARTICLE IS TRACKED FROM ZEMIS-ZSTEP2 DOWN TO ZEMIS+ZSTEP2
        THCKHO = THCKSI( AUXOLD )    !old thicknes
        THCKHN = THCKSI( AUXNEW )    !new thicknes
        LPCT1  = LBIN( XEMIS-XSTEP2,YEMIS-YSTEP2,ZEMIS-ZSTEP2,1 )
        LPCT2  = LBIN( XEMIS+XSTEP2,YEMIS+YSTEP2,ZEMIS+ZSTEP2,LPCT1 )
     *             - 1
        LPCT2  = MIN( LPCT2, NSTEP+1 )
#endif
#else
C  IF STARTING POINT IS BELOW LOWEST LEVEL THEN DON''T CHECK.
      IF ( HLONG(NSTEP) .LE. (ZEMIS-ZSTEP2) ) THEN
C  FIND FIRST THE EQUIVALENT LEVELS
C  THE PARTICLE IS TRACKED FROM ZEMIS-ZSTEP2 DOWN TO ZEMIS+ZSTEP2
        THCKHO = THICK( ZEMIS-ZSTEP2 )
        THCKHN = THICK( ZEMIS+ZSTEP2 )
        LPCT1  = INT( THCKHO*THSTPI + 1.D0 )
        LPCT2  = INT( THCKHN*THSTPI )
        LPCT2  = MIN( LPCT2, NSTEP )
#endif
C  TOTAL PATH LENGTH STEPT IN UNITS OF LONGI BINS
        STEPT  = (THCKHN - THCKHO) * THSTPI
C  OLD INTEGRATED MODE IS OBTAINED BY INTEGRATION OF THE LONGITUDINAL
C  CHERENKOV DISTRIBUTION AT THE END OF THE SHOWER IN AAMAIN. THIS IS
C  MUCH MORE EFFICIENT THAN THE OLDER PROCEDURE. HOMOGENEOUS GENERATION
C  OF CHERENKOV PHOTONS ALONG PATH IS ASSUMED.
C  PHOTB IS NUMBER OF CHERENKOV PHOTONS EMITTED IN EACH BIN.
        IF ( STEPT .GT. 0.D0 ) THEN
#if __THIN__
          PHOTB = PHOTCM * WTCER / STEPT
#else
          PHOTB = PHOTCM / STEPT
#endif
        ELSE
          PHOTB = 0.D0
        ENDIF
C  PHOTONS EMITTED IN FIRST BIN
        PHOTB1 = PHOTB * (DBLE(LPCT1) - THCKHO*THSTPI)
C  PHOTONS EMITTED IN LAST BIN
        IF ( LPCT2 .GE. LPCT1 ) THEN
          PHOTBN = PHOTB*(THCKHN*THSTPI - DBLE(LPCT2))
        ELSE
          PHOTBN = PHOTB*(THCKHN*THSTPI - DBLE(LPCT1))
        ENDIF
C  NOW FILL FIRST AND LAST+1 BIN, THEN LOOP OVER THE BINS BETWEEN
        PLONG(LPCT1,9) = PLONG(LPCT1,9) + PHOTB1
        IF ( LPCT2 .LT. NSTEP ) THEN
          PLONG(LPCT2+1,9) = PLONG(LPCT2+1,9) + PHOTBN
        ENDIF
C  LOOP OVER ALL LONGITUDINAL BINS
        IF ( LPCT2 .GT. LPCT1 ) THEN
          DO  IL = LPCT1, LPCT2-1
            PLONG(IL+1,9) = PLONG(IL+1,9) + PHOTB
          ENDDO
        ENDIF
      ENDIF

      RETURN
      END
#endif

#if  __CEFFIC__ && __CERENKOV__
*-- Author : V. de Souza Filho, Uni. Campinas   22/06/1999
C=======================================================================

      SUBROUTINE CESPEC( CEWL )

C-----------------------------------------------------------------------
C  CE(RENKOV) SPEC(TRUM)
C
C  THIS FUNCTION DRAWS A WAVELENGTH FOR THE EMITTED CHERENKOV PHOTON.
C  THE VARIABLE WAVLGL AND WAVLGU ARE INPUT PARAMETERS DETERMINED
C  IN THE STEERING DATA FILE.
C  THE WAVELENGTH RETURNED IN THIS SUBROUT. OBEYS THE
C  DISTRIBUITION FUNTION  1/LAMBDA**2.
C  WAVLGL = MINIMUM WAVELENGTH FOR THE CHERENKOV EMISSION
C  WAVLGU = MAXIMUM WAVELENGTH FOR THE CHERENKOV EMISSION
C  CERNOR = NORMALIZATION CONSTANT FOR THE DISTRIBUITION
C  THIS SUBROUTINE IS CALLED FROM CERENK.
C  ARGUMENT:
C   CEWL   = EMISSION WAVELENGTH (NM)
C-----------------------------------------------------------------------

      IMPLICIT NONE
#define __CEREN1INC__
#define __RANDPAINC__
#define __RUNPARINC__
#include "corsika.h"

      DOUBLE PRECISION CEWL
      SAVE
C-----------------------------------------------------------------------

CC    IF ( DEBUG .OR. LCERDB ) WRITE(MDEBUG,*) 'CESPEC:'

      CALL RMMARD( RD,1,3 )
      CEWL = CERNOR*WAVLGL/(CERNOR-RD(1)*WAVLGL)

      RETURN
      END
#endif